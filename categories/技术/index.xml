<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>技术 - Category - Billy's Blog</title><link>https://virgoC0der.github.io/categories/%E6%8A%80%E6%9C%AF/</link><description>技术 - Category - Billy's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>billychen826@gmail.com (Billy)</managingEditor><webMaster>billychen826@gmail.com (Billy)</webMaster><lastBuildDate>Mon, 31 Mar 2025 10:00:00 +0800</lastBuildDate><atom:link href="https://virgoC0der.github.io/categories/%E6%8A%80%E6%9C%AF/" rel="self" type="application/rss+xml"/><item><title>Claude+MCP一键生成博客：AI助力内容创作与自动化部署</title><link>https://virgoC0der.github.io/posts/claude-mcp-blog-automation/</link><pubDate>Mon, 31 Mar 2025 10:00:00 +0800</pubDate><author>Billy</author><guid>https://virgoC0der.github.io/posts/claude-mcp-blog-automation/</guid><description><![CDATA[<h1 id="claudemcp一键生成博客ai助力内容创作与自动化部署">Claude+MCP一键生成博客：AI助力内容创作与自动化部署</h1>
<p>在这个信息爆炸的时代，高效地创建和发布内容已成为许多创作者的迫切需求。今天，我想分享一个结合了AI大语言模型Claude和Multi-Command Pipeline (MCP)的强大工作流，它可以让你以惊人的速度从创意到发布完成整个博客创作过程。</p>
<h2 id="工作流概述">工作流概述</h2>
<p>这个一键式博客生成和部署流程包含三个主要步骤：</p>
<ol>
<li>使用Claude生成高质量的博客内容并保存为Markdown文件</li>
<li>通过MCP自动推送到GitHub仓库并触发GitHub Actions</li>
<li>利用Playwright自动检查部署结果</li>
</ol>
<p>这个过程完全自动化，从内容创建到部署验证，几乎不需要人工干预。</p>
<h2 id="第一步claude生成博客内容">第一步：Claude生成博客内容</h2>
<p>Claude是Anthropic开发的一款强大的大语言模型，具有出色的写作能力和上下文理解能力。在这个工作流中，你只需要：</p>
<ol>
<li>向Claude提供博客主题和要点</li>
<li>Claude生成完整的博客文章，包括标题、正文、标签等</li>
<li>Claude将文章保存为Markdown文件到你的博客仓库目录</li>
</ol>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-python">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># 使用Claude API生成博客内容的示例代码</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">anthropic</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">client</span> <span class="o">=</span> <span class="n">anthropic</span><span class="o">.</span><span class="n">Anthropic</span><span class="p">(</span><span class="n">api_key</span><span class="o">=</span><span class="s2">&#34;your_api_key&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">messages</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">model</span><span class="o">=</span><span class="s2">&#34;claude-3-7-sonnet-20250219&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">max_tokens</span><span class="o">=</span><span class="mi">4000</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">system</span><span class="o">=</span><span class="s2">&#34;你是一位专业博客作者，擅长技术和科技内容创作。&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">messages</span><span class="o">=</span><span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span><span class="s2">&#34;role&#34;</span><span class="p">:</span> <span class="s2">&#34;user&#34;</span><span class="p">,</span> <span class="s2">&#34;content&#34;</span><span class="p">:</span> <span class="s2">&#34;请为我写一篇关于&#39;Python异步编程&#39;的技术博客，包括介绍、基础概念、实际应用和最佳实践。&#34;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">markdown_content</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">content</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">text</span></span></span></code></pre></div></div>
<p>然后，将生成的内容保存到博客仓库的指定目录中：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-python">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">save_blog_post</span><span class="p">(</span><span class="n">content</span><span class="p">,</span> <span class="n">title</span><span class="p">,</span> <span class="n">directory</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 创建文件名（日期-标题）</span>
</span></span><span class="line"><span class="cl">    <span class="n">date_str</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s2">&#34;%Y-%m-</span><span class="si">%d</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">filename</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="n">date_str</span><span class="si">}</span><span class="s2">-</span><span class="si">{</span><span class="n">title</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39;-&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">.md&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">filepath</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">directory</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># 保存文件</span>
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">filepath</span><span class="p">,</span> <span class="s2">&#34;w&#34;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s2">&#34;utf-8&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">filepath</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 调用保存函数</span>
</span></span><span class="line"><span class="cl"><span class="n">blog_path</span> <span class="o">=</span> <span class="n">save_blog_post</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">markdown_content</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Python异步编程指南&#34;</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;/Users/username/blog/content/posts/&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></div></div>
<h2 id="第二步mcp自动化git操作和部署">第二步：MCP自动化Git操作和部署</h2>
<p>Multi-Command Pipeline (MCP)是一个强大的自动化工具，可以执行一系列命令操作。在这个工作流中，我们利用MCP的desktop-commander功能来完成Git操作，并触发GitHub Actions自动部署：</p>]]></description></item></channel></rss>