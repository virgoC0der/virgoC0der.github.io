<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>All Posts - Billy's Blog</title><link>https://virgoC0der.github.io/posts/</link><description>All Posts | Billy's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>billychen826@gmail.com (Billy)</managingEditor><webMaster>billychen826@gmail.com (Billy)</webMaster><lastBuildDate>Thu, 27 Mar 2025 11:32:53 +0800</lastBuildDate><atom:link href="https://virgoC0der.github.io/posts/" rel="self" type="application/rss+xml"/><item><title>使用Docker构建高效的Golang开发环境：完整指南</title><link>https://virgoC0der.github.io/posts/golang-docker/</link><pubDate>Thu, 27 Mar 2025 11:32:53 +0800</pubDate><author>VirgoC0der</author><guid>https://virgoC0der.github.io/posts/golang-docker/</guid><description><![CDATA[<h1 id="使用docker构建高效的golang开发环境完整指南">使用Docker构建高效的Golang开发环境：完整指南</h1>
<p>在现代软件开发中，保持开发环境的一致性和可复制性至关重要。无论是团队协作还是个人项目，环境差异常常导致&quot;在我的机器上能运行&quot;的问题。Docker作为容器化技术的代表，为解决这一问题提供了优雅的解决方案。本文将详细介绍如何使用Docker构建一个高效的Golang开发环境，包括多阶段构建、热重载和最佳实践。</p>
<h2 id="为什么选择docker--golang">为什么选择Docker + Golang？</h2>
<p>Golang和Docker的组合有着天然的契合性：</p>
<ol>
<li><strong>轻量级</strong>：Go编译后的二进制文件体积小，启动快，非常适合容器化部署</li>
<li><strong>跨平台</strong>：通过Docker容器，可以在任何支持Docker的平台上获得一致的开发体验</li>
<li><strong>依赖管理</strong>：容器化环境避免了&quot;依赖地狱&quot;问题，确保所有开发者使用相同的依赖版本</li>
<li><strong>隔离性</strong>：开发环境与主机系统隔离，避免污染本地环境</li>
<li><strong>CI/CD友好</strong>：容器化的开发环境可以无缝集成到CI/CD流程中</li>
</ol>
<h2 id="环境准备">环境准备</h2>
<p>在开始之前，请确保您的系统已安装以下软件：</p>
<ul>
<li>Docker（<a href="https://docs.docker.com/get-docker/" target="_blank" rel="noopener noreffer ">安装指南</a>）</li>
<li>Docker Compose（<a href="https://docs.docker.com/compose/install/" target="_blank" rel="noopener noreffer ">安装指南</a>）</li>
<li>Git（<a href="https://git-scm.com/downloads" target="_blank" rel="noopener noreffer ">安装指南</a>）</li>
</ul>
<h2 id="项目结构">项目结构</h2>
<p>我们将创建一个具有以下结构的项目：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><pre tabindex="0"><code>docker-golang-dev/
├── .air.toml              # Air 热重载配置文件
├── Dockerfile             # 多阶段构建的 Dockerfile
├── docker-compose.yml     # Docker Compose 配置文件
├── go.mod                 # Go 模块定义
├── go.sum                 # Go 模块校验和
└── src/                   # Go 源代码目录
    └── main.go            # 示例应用程序</code></pre></div>
<h2 id="步骤一创建基础项目结构">步骤一：创建基础项目结构</h2>
<p>首先，让我们创建项目目录并初始化Go模块：</p>]]></description></item><item><title>在Mac Mini上部署私有化大语言模型</title><link>https://virgoC0der.github.io/posts/first/</link><pubDate>Mon, 24 Mar 2025 15:56:48 +0800</pubDate><author>VirgoC0der</author><guid>https://virgoC0der.github.io/posts/first/</guid><description><![CDATA[<h2 id="环境准备">环境准备</h2>
<ol>
<li>系统要求：
<ul>
<li>macOS Monterey 12.3 或更高版本</li>
<li>至少16GB内存（推荐32GB）</li>
<li>安装Homebrew包管理器</li>
</ul>
</li>
</ol>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 安装Homebrew</span>
</span></span><span class="line"><span class="cl">/bin/bash -c <span class="s2">&#34;</span><span class="k">$(</span>curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh<span class="k">)</span><span class="s2">&#34;</span></span></span></code></pre></div></div>
<h2 id="安装部署">安装部署</h2>
<h3 id="1-安装ollama">1. 安装Ollama</h3>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 通过curl直接安装</span>
</span></span><span class="line"><span class="cl">curl -fsSL https://ollama.com/install.sh <span class="p">|</span> sh
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 启动ollama服务</span>
</span></span><span class="line"><span class="cl">ollama serve</span></span></code></pre></div></div>
<h3 id="2-部署open-webui">2. 部署Open WebUI</h3>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 使用Docker运行webui容器</span>
</span></span><span class="line"><span class="cl">docker run -d -p 3000:8080 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  -v ollama:/root/.ollama <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --name open-webui <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  ghcr.io/open-webui/open-webui:main</span></span></code></pre></div></div>
<h2 id="模型加载">模型加载</h2>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 下载llama3模型（根据需求替换模型名称）</span>
</span></span><span class="line"><span class="cl">ollama pull llama3
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看已安装模型</span>
</span></span><span class="line"><span class="cl">ollama list</span></span></code></pre></div></div>
<h2 id="访问验证">访问验证</h2>
<ol>
<li>
<p>打开浏览器访问：</p>]]></description></item></channel></rss>